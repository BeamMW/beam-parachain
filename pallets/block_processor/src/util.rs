use bytes::{BufMut};

use sp_std::{
    vec::Vec,
};

const FORKS: &[&[u8]] = &[
    &[0xed, 0x91, 0xa7, 0x17, 0x31, 0x3c, 0x6e, 0xb0, 0xe3, 0xf0, 0x82, 0x41, 0x15, 0x84, 0xd0, 0xda, 0x8f, 0x0c, 0x8a, 0xf2, 0xa4, 0xac, 0x01, 0xe5, 0xaf, 0x19, 0x59, 0xe0, 0xec, 0x43, 0x38, 0xbc],
    &[0x6d, 0x62, 0x2e, 0x61, 0x5c, 0xfd, 0x29, 0xd0, 0xf8, 0xcd, 0xd9, 0xbd, 0xd7, 0x3c, 0xa0, 0xb7, 0x69, 0xc8, 0x66, 0x1b, 0x29, 0xd7, 0xba, 0x9c, 0x45, 0x85, 0x6c, 0x96, 0xbc, 0x2e, 0xc5, 0xbc],
    &[0x1c, 0xe8, 0xf7, 0x21, 0xbf, 0x0c, 0x9f, 0xa7, 0x47, 0x37, 0x95, 0xa9, 0x7e, 0x36, 0x5a, 0xd3, 0x8b, 0xbc, 0x53, 0x9a, 0xab, 0x82, 0x1d, 0x69, 0x12, 0xd8, 0x6f, 0x24, 0xe6, 0x77, 0x20, 0xfc]
];


pub fn encode_num(num: u64) -> Vec<u8> {
    let mut buf = Vec::new();

    let mut num = num;
    while num >= 0x80 {
        buf.put_u8((num as u8 | 0x80) as u8);
        num = num >> 7;
    }

    buf.put_u8(num as u8);

    buf
}

pub fn find_fork(height: u64) -> u8 {
    if height >= 777777 {
        return 2;
    }
    if height >= 321321 {
        return 1;
    }

    0
}

pub fn get_fork_hash(fork: usize) -> &'static [u8] {
    if fork < FORKS.len() {
        return FORKS[fork];
    }

    FORKS[0]
}
